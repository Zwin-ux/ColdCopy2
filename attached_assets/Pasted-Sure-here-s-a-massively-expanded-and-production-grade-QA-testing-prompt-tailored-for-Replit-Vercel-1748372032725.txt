Sure, here's a massively expanded and production-grade QA/testing prompt tailored for Replit, Vercel, or any dev environment. This version assumes you are finalizing a SaaS app like ColdCopy and want to rigorously test everything as if a real user is onboarding.

---

**🧪 Final Deployment QA Checklist & Test Script — "Act Like a Real User"**

🚨 **Goal:** Ensure that all API keys, `curl` calls, routes, and features are fully working *as a real user would experience them*. We're doing a full functional sweep before launch — no feature should break, no route should dead-end.

---

### ✅ 1. **Environment Check**

**Ensure:**

* All required `.env` keys are defined:

  * `OPENAI_API_KEY`, `SUPABASE_URL`, `SUPABASE_ANON_KEY`, etc.
* No warnings or missing variable errors on dev server launch:

```bash
yarn dev
```

**Test:**

```bash
echo $SUPABASE_ANON_KEY
echo $OPENAI_API_KEY
```

* Use `curl` to manually ping a test route:

```bash
curl -X POST https://yourdomain/api/test-route -H "Authorization: Bearer YOUR_KEY" -d '{"test":"true"}'
```

---

### 🧭 2. **Navigation UX Audit (as User)**

Walk through **every path a user could take**, starting from scratch.

**Cases:**

1. First-time visitor on home page (no cookies or login):

   * What do they see?
   * Are CTAs clear?
2. Clicking “Get Started” or “Generate Message”:

   * Does it go to login/signup?
   * Does route redirect correctly post-auth?
3. After first free message:

   * Does the **IP tracking** kick in?
   * Is the **signup/paywall logic** shown appropriately?
4. Already logged in:

   * Can user view dashboard, generate again, see pricing?
5. Logout and refresh:

   * Do routes correctly redirect? Is state preserved?

---

### 📬 3. **API Call & Curl Test Plan**

**Test each of the following API interactions with `curl` or frontend devtools:**

| API Name        | Test Type | Expectation                           |
| --------------- | --------- | ------------------------------------- |
| `/api/generate` | POST      | Returns AI-generated text             |
| `/api/signup`   | POST      | Creates user, returns token           |
| `/api/login`    | POST      | Authenticates, returns token          |
| `/api/check-ip` | GET       | Detects abuse/multiple free attempts  |
| `/api/stripe`   | POST      | Begins checkout session (returns URL) |
| `/api/user`     | GET       | Fetches user state/info post-login    |

Example test:

```bash
curl -X POST https://yourdomain/api/generate \
-H "Authorization: Bearer test_token" \
-H "Content-Type: application/json" \
-d '{"prompt":"write a cold email"}'
```

---

### 📌 4. **Route-by-Route Breakdown**

**✅ Test these pages manually + automate where possible:**

* `/` → Home
* `/generate` → Message builder
* `/login` & `/signup`
* `/dashboard`
* `/pricing`
* `/settings` (if exists)
* `/api/*` (backed routes — make sure protected routes reject unauth’d access)

---

### 💥 5. **Failure Handling**

Test what happens if:

* User submits a blank form
* API returns 500 (simulate with bad token)
* Internet disconnects mid-request
* AI model times out or fails
* Stripe checkout fails or is cancelled

---

### 🧠 6. **Behavior-Driven Use Cases**

Use **realistic mental models** of your user. For example:

**User A: Recruiter**

* Visits homepage → clicks “Try now” → generates 1 message → wants to upgrade → goes through Stripe → returns to dashboard

**User B: Hacker**

* Tries to use curl to call `/generate` without logging in → blocked
* Changes cookies to spoof logged-in state → fails due to backend auth

**User C: Mobile User**

* Taps links, refreshes, goes back
* Are mobile menus and button sizes functional?

---

### 🧹 7. **Final Polish**

* ✅ Meta tags, favicon, title
* ✅ 404 page works
* ✅ Terms/Privacy (even placeholder)
* ✅ Loading states, disabled buttons on API calls
* ✅ Console has no red errors or warnings
* ✅ All text is readable and professional (no TODOs or "lorem ipsum")

---

### 🧰 8. **Optional: Add Test Users + Automation**

If using Supabase/Auth:

* Create test accounts
* Log activity with `console.log` or Supabase logs
* Optionally write Cypress/Puppeteer test flows

---

### Summary: What You’re Testing

* ✅ API Keys (environment + curl verification)
* ✅ All routes reachable + logically connected
* ✅ Navigation is clean, intuitive, mobile-friendly
* ✅ AI and Stripe integrations fully functional
* ✅ User state transitions (free → auth → paid) are flawless
* ✅ Failure cases are gracefully handled

---

Let me know if you want this converted into a scriptable `.test.js` file or a Notion QA checklist for your team.

Would you like a **GitHub issue template** for bug reporting too?
